# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.av_user import AVUser
from openapi_server.models.post import Post
from openapi_server import util

from openapi_server.models.av_user import AVUser  # noqa: E501
from openapi_server.models.post import Post  # noqa: E501

class PostReaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, post=None, author=None, emoji=None):  # noqa: E501
        """PostReaction - a model defined in OpenAPI

        :param post: The post of this PostReaction.  # noqa: E501
        :type post: Post
        :param author: The author of this PostReaction.  # noqa: E501
        :type author: AVUser
        :param emoji: The emoji of this PostReaction.  # noqa: E501
        :type emoji: str
        """
        self.openapi_types = {
            'post': Post,
            'author': AVUser,
            'emoji': str
        }

        self.attribute_map = {
            'post': 'post',
            'author': 'author',
            'emoji': 'emoji'
        }

        self._post = post
        self._author = author
        self._emoji = emoji

    @classmethod
    def from_dict(cls, dikt) -> 'PostReaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PostReaction of this PostReaction.  # noqa: E501
        :rtype: PostReaction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def post(self):
        """Gets the post of this PostReaction.


        :return: The post of this PostReaction.
        :rtype: Post
        """
        return self._post

    @post.setter
    def post(self, post):
        """Sets the post of this PostReaction.


        :param post: The post of this PostReaction.
        :type post: Post
        """
        if post is None:
            raise ValueError("Invalid value for `post`, must not be `None`")  # noqa: E501

        self._post = post

    @property
    def author(self):
        """Gets the author of this PostReaction.


        :return: The author of this PostReaction.
        :rtype: AVUser
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this PostReaction.


        :param author: The author of this PostReaction.
        :type author: AVUser
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def emoji(self):
        """Gets the emoji of this PostReaction.

        Reaction of the post.  # noqa: E501

        :return: The emoji of this PostReaction.
        :rtype: str
        """
        return self._emoji

    @emoji.setter
    def emoji(self, emoji):
        """Sets the emoji of this PostReaction.

        Reaction of the post.  # noqa: E501

        :param emoji: The emoji of this PostReaction.
        :type emoji: str
        """
        allowed_values = ["thumbup"]  # noqa: E501
        if emoji not in allowed_values:
            raise ValueError(
                "Invalid value for `emoji` ({0}), must be one of {1}"
                .format(emoji, allowed_values)
            )

        self._emoji = emoji
