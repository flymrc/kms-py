# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.av_user import AVUser
from openapi_server import util

from openapi_server.models.av_user import AVUser  # noqa: E501

class Post(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author=None, root_post=None, parent_post=None, title=None, content=None, count_thumbup=None, count_comment=None, count_repost=None, replied_at=None, development=None):  # noqa: E501
        """Post - a model defined in OpenAPI

        :param author: The author of this Post.  # noqa: E501
        :type author: AVUser
        :param root_post: The root_post of this Post.  # noqa: E501
        :type root_post: Post
        :param parent_post: The parent_post of this Post.  # noqa: E501
        :type parent_post: Post
        :param title: The title of this Post.  # noqa: E501
        :type title: str
        :param content: The content of this Post.  # noqa: E501
        :type content: str
        :param count_thumbup: The count_thumbup of this Post.  # noqa: E501
        :type count_thumbup: int
        :param count_comment: The count_comment of this Post.  # noqa: E501
        :type count_comment: int
        :param count_repost: The count_repost of this Post.  # noqa: E501
        :type count_repost: int
        :param replied_at: The replied_at of this Post.  # noqa: E501
        :type replied_at: date
        :param development: The development of this Post.  # noqa: E501
        :type development: bool
        """
        self.openapi_types = {
            'author': AVUser,
            'root_post': Post,
            'parent_post': Post,
            'title': str,
            'content': str,
            'count_thumbup': int,
            'count_comment': int,
            'count_repost': int,
            'replied_at': date,
            'development': bool
        }

        self.attribute_map = {
            'author': 'author',
            'root_post': 'rootPost',
            'parent_post': 'parentPost',
            'title': 'title',
            'content': 'content',
            'count_thumbup': 'countThumbup',
            'count_comment': 'countComment',
            'count_repost': 'countRepost',
            'replied_at': 'repliedAt',
            'development': 'development'
        }

        self._author = author
        self._root_post = root_post
        self._parent_post = parent_post
        self._title = title
        self._content = content
        self._count_thumbup = count_thumbup
        self._count_comment = count_comment
        self._count_repost = count_repost
        self._replied_at = replied_at
        self._development = development

    @classmethod
    def from_dict(cls, dikt) -> 'Post':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Post of this Post.  # noqa: E501
        :rtype: Post
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this Post.

        Author of the post.  # noqa: E501

        :return: The author of this Post.
        :rtype: AVUser
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Post.

        Author of the post.  # noqa: E501

        :param author: The author of this Post.
        :type author: AVUser
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def root_post(self):
        """Gets the root_post of this Post.

        Root post if this post is a re-post, otherwise set to `null`  # noqa: E501

        :return: The root_post of this Post.
        :rtype: Post
        """
        return self._root_post

    @root_post.setter
    def root_post(self, root_post):
        """Sets the root_post of this Post.

        Root post if this post is a re-post, otherwise set to `null`  # noqa: E501

        :param root_post: The root_post of this Post.
        :type root_post: Post
        """

        self._root_post = root_post

    @property
    def parent_post(self):
        """Gets the parent_post of this Post.

        Parent post if this post is a re-post, otherwise set to `null`  # noqa: E501

        :return: The parent_post of this Post.
        :rtype: Post
        """
        return self._parent_post

    @parent_post.setter
    def parent_post(self, parent_post):
        """Sets the parent_post of this Post.

        Parent post if this post is a re-post, otherwise set to `null`  # noqa: E501

        :param parent_post: The parent_post of this Post.
        :type parent_post: Post
        """

        self._parent_post = parent_post

    @property
    def title(self):
        """Gets the title of this Post.

        Required, title of the post.  # noqa: E501

        :return: The title of this Post.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Post.

        Required, title of the post.  # noqa: E501

        :param title: The title of this Post.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if title is not None and len(title) > 30:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `30`")  # noqa: E501
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def content(self):
        """Gets the content of this Post.

        Content of the post.  # noqa: E501

        :return: The content of this Post.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Post.

        Content of the post.  # noqa: E501

        :param content: The content of this Post.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501
        if content is not None and len(content) > 300:
            raise ValueError("Invalid value for `content`, length must be less than or equal to `300`")  # noqa: E501
        if content is not None and len(content) < 0:
            raise ValueError("Invalid value for `content`, length must be greater than or equal to `0`")  # noqa: E501

        self._content = content

    @property
    def count_thumbup(self):
        """Gets the count_thumbup of this Post.

        count number of thumbup in PostReaction.  # noqa: E501

        :return: The count_thumbup of this Post.
        :rtype: int
        """
        return self._count_thumbup

    @count_thumbup.setter
    def count_thumbup(self, count_thumbup):
        """Sets the count_thumbup of this Post.

        count number of thumbup in PostReaction.  # noqa: E501

        :param count_thumbup: The count_thumbup of this Post.
        :type count_thumbup: int
        """
        if count_thumbup is not None and count_thumbup < 0:  # noqa: E501
            raise ValueError("Invalid value for `count_thumbup`, must be a value greater than or equal to `0`")  # noqa: E501

        self._count_thumbup = count_thumbup

    @property
    def count_comment(self):
        """Gets the count_comment of this Post.


        :return: The count_comment of this Post.
        :rtype: int
        """
        return self._count_comment

    @count_comment.setter
    def count_comment(self, count_comment):
        """Sets the count_comment of this Post.


        :param count_comment: The count_comment of this Post.
        :type count_comment: int
        """
        if count_comment is not None and count_comment < 0:  # noqa: E501
            raise ValueError("Invalid value for `count_comment`, must be a value greater than or equal to `0`")  # noqa: E501

        self._count_comment = count_comment

    @property
    def count_repost(self):
        """Gets the count_repost of this Post.


        :return: The count_repost of this Post.
        :rtype: int
        """
        return self._count_repost

    @count_repost.setter
    def count_repost(self, count_repost):
        """Sets the count_repost of this Post.


        :param count_repost: The count_repost of this Post.
        :type count_repost: int
        """
        if count_repost is not None and count_repost < 0:  # noqa: E501
            raise ValueError("Invalid value for `count_repost`, must be a value greater than or equal to `0`")  # noqa: E501

        self._count_repost = count_repost

    @property
    def replied_at(self):
        """Gets the replied_at of this Post.

        Latest replied time (include comment and re-post)  # noqa: E501

        :return: The replied_at of this Post.
        :rtype: date
        """
        return self._replied_at

    @replied_at.setter
    def replied_at(self, replied_at):
        """Sets the replied_at of this Post.

        Latest replied time (include comment and re-post)  # noqa: E501

        :param replied_at: The replied_at of this Post.
        :type replied_at: date
        """

        self._replied_at = replied_at

    @property
    def development(self):
        """Gets the development of this Post.

        Differentiate the posts version, true is beta.  # noqa: E501

        :return: The development of this Post.
        :rtype: bool
        """
        return self._development

    @development.setter
    def development(self, development):
        """Sets the development of this Post.

        Differentiate the posts version, true is beta.  # noqa: E501

        :param development: The development of this Post.
        :type development: bool
        """

        self._development = development
